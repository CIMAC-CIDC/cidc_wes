# module:Precision HLA typing from next-generation sequencing data by Optitype and Polysolver
_optitype_threads=16

def optitype_targets(wildcards):
    """ Generates the targets for this module"""
    ls = []
    for sample in config['samples']:
        ls.append("analysis/optitype/%s/%s_result.tsv" % (sample,sample))
        ls.append("analysis/optitype/%s/%s_coverage_plot.pdf" % (sample,sample))
        ls.append("analysis/optitype/%s/%s.sorted.chr6.bam" % (sample,sample))
        ls.append("analysis/optitype/%s/%s.sorted.chr6.end1.fastq" % (sample,sample))
        ls.append("analysis/optitype/%s/%s.sorted.chr6.end2.fastq" % (sample,sample))
        #OUTPUT file map
        ls.append("analysis/optitype/%s/%s.optitype.output.yaml" % (sample, sample))
    return ls

def optitype_output_files(wildcards):
    """returns a list of filepaths generated by this module to store 
    in the CIDC for a given sample 
    """
    ls = []
    sample = wildcards.sample
    ls.append("analysis/optitype/%s/%s_result.tsv" % (sample,sample))
    return ls

rule optitype_make_file_map:
    input:
        optitype_output_files
    output:
        "analysis/optitype/{sample}/{sample}.optitype.output.yaml"
    params:
        sample = lambda wildcards: wildcards.sample,
        keys = " -k ".join(['optitype_results']),
        files = lambda wildcards, input: " -f ".join(input),
    shell:
        "cidc_wes/modules/scripts/yaml_writer.py -t samples -n {params.sample} -k {params.keys} -f {params.files} > {output}"


rule optitype_all:
    input:
        optitype_targets
        
rule optitype_extract_chr6:
    """Extract chr6 by sambamba"""
    input:
        in_sortbamfile = "analysis/align/{sample}/{sample}.sorted.dedup.bam"
    output:
        chr6sortbamfile = "analysis/optitype/{sample}/{sample}.sorted.chr6.bam"
    threads:_optitype_threads
    group: "optitype"
    conda: "../envs/optitype.yml"
    benchmark:
        "benchmarks/optitype/{sample}/{sample}.optitype_extract_chr6.txt"
    shell:
        """sambamba view -t {threads} -f bam -h {input.in_sortbamfile} chr6 > {output.chr6sortbamfile}"""
        
rule optitype_bamtofastq:
    """Convert the sorted.chr6.bam file to fastq by samtools"""
    input:
        in_sortchr6bamfile = "analysis/optitype/{sample}/{sample}.sorted.chr6.bam"
    output:
        chr6fastqfile1 = "analysis/optitype/{sample}/{sample}.sorted.chr6.end1.fastq",
        chr6fastqfile2 = "analysis/optitype/{sample}/{sample}.sorted.chr6.end2.fastq"
    group: "optitype"
    conda: "../envs/optitype.yml"
    log: "analysis/logs/optitype/{sample}/{sample}.optitype_bamtofastq.log"
    benchmark:
        "benchmarks/optitype/{sample}/{sample}.optitype_bamtofastq.txt"
    shell:
        """samtools fastq -@ 2 -1 {output.chr6fastqfile1} -2 {output.chr6fastqfile2} {input.in_sortchr6bamfile} 2> {log}"""

rule optitype_hlatyping:
    """Precision HLA typing from next-generation sequencing data by
    OptiType This will produce a time-stamped directory inside the
    specified outputn directory containing a CSV file with the predicted
    optimal (and if enumerated, sub-optimal)HLA genotype, and a pdf file
    containing a coverage plot of the predicted alleles for diagnostic
    purposes"""
    
    input:
        in_chr6fastqfile1 = "analysis/optitype/{sample}/{sample}.sorted.chr6.end1.fastq",
        in_chr6fastqfile2 = "analysis/optitype/{sample}/{sample}.sorted.chr6.end2.fastq"
    params:
        #PathtoOptiType = config['conda_path'],
        name=lambda wildcards: wildcards.sample,
        output_dir=lambda wildcards: "%sanalysis/optitype/%s/" % (config['remote_path'], wildcards.sample),
        #outputname = lambda wildcards: wildcards.sample
        path="source activate %s" % config['optitype_root'],
        optitype_config="cidc_wes/static/optitype/config.ini",
    output:
        HLAgenotype = "analysis/optitype/{sample}/{sample}_result.tsv",
        Coverageplot = "analysis/optitype/{sample}/{sample}_coverage_plot.pdf"
    group: "optitype"
    conda: "../envs/optitype.yml"
    benchmark:
        "benchmarks/optitype/{sample}/{sample}.optitype_hlatyping.txt"
    shell:
        """{params.path}; OptiTypePipeline.py -i {input.in_chr6fastqfile1} {input.in_chr6fastqfile2} --dna -v -o {params.output_dir} -p {params.name} --config {params.optitype_config}"""
