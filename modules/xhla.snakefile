# module:Precision HLA typing from next-generation sequencing data by xHLA
_xhla_threads=16

def xhla_targets(wildcards):
    """ Generates the targets for this module"""
    ls = []
    for sample in config['samples']:
        ls.append("analysis/xhla/%s/report-%s-hla.json" % (sample,sample))
        #output file map
        ls.append("analysis/xhla/%s/%s.xhla.output.yaml" % (sample,sample))
    return ls

def xhla_output_files(wildcards):
    """returns a list of filepaths generated by this module to store 
    in the CIDC for a given sample 
    """
    ls = []
    sample = wildcards.sample
    ls.append("analysis/xhla/%s/report-%s-hla.json" % (sample,sample))
    return ls

rule xhla_make_file_map:
    input:
        xhla_output_files
    output:
        "analysis/xhla/{sample}/{sample}.xhla.output.yaml"
    params:
        sample = lambda wildcards: wildcards.sample,
        keys = " -k ".join(['xhla_results']),
        files = lambda wildcards, input: " -f ".join(input),
    shell:
        "cidc_wes/modules/scripts/yaml_writer.py -t samples -n {params.sample} -k {params.keys} -f {params.files} > {output}"


rule xhla_all:
    input:
        xhla_targets

rule xhla:
    """calculate hlatyping by xhla"""
    input:
        in_sortbamfile = "analysis/align/{sample}/{sample}.sorted.dedup.bam"
    output:
        chr6sortbamfile = "analysis/xhla/{sample}/report-{sample}-hla.json"
    threads:_xhla_threads
    group: "xhla"
    params:
        name=lambda wildcards: wildcards.sample,
        output_dir=lambda wildcards: "%sanalysis/xhla/%s/" % (config['remote_path'], wildcards.sample),
        path="source activate %s" % config['xhla_root'],
    #singularity: "docker://humanlongevity/hla"
    conda: "../envs/xhla_env.yml"
    benchmark:
        "benchmarks/xhla/{sample}/{sample}.xhla.txt"
    shell:
        """{params.path}; run.py --sample_id {params.name} --input_bam_path {input.in_sortbamfile} --output_path  {params.output_dir}"""
